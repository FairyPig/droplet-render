#include "main.h"
#include "KernelSampler.h"

#define USE_SSE2
#include "sse_mathfun.h"

//precomputed Mie phase (RGB channels) for cloud droplets, 1024*3 entries
static const dfloat3 miepdf[] = {
	{0.0903518f,0.0916993f,0.0930511f},{0.0590581f,0.0682281f,0.0681127f},{0.0594793f,0.0577884f,0.0635298f},{0.0778413f,0.0710927f,0.0662018f},
	{0.0689750f,0.0670088f,0.0618945f},{0.0541196f,0.0526665f,0.0511249f},{0.0433591f,0.0426231f,0.0396629f},{0.0361033f,0.0352673f,0.0351138f},
	{0.0320661f,0.0315243f,0.0307226f},{0.0292582f,0.0288718f,0.0280235f},{0.0270853f,0.0264684f,0.0269610f},{0.0256710f,0.0255000f,0.0247138f},
	{0.0245642f,0.0243870f,0.0243206f},{0.0236998f,0.0234565f,0.0236527f},{0.0227712f,0.0228295f,0.0227889f},{0.0222556f,0.0219681f,0.0223209f},
	{0.0216555f,0.0215517f,0.0216821f},{0.0211467f,0.0211801f,0.0213571f},{0.0208651f,0.0208089f,0.0212091f},{0.0206035f,0.0206007f,0.0208488f},
	{0.0203862f,0.0203613f,0.0207457f},{0.0201207f,0.0202617f,0.0206991f},{0.0200347f,0.0201785f,0.0207057f},{0.0201163f,0.0200269f,0.0206364f},
	{0.0200920f,0.0201119f,0.0204469f},{0.0199490f,0.0200663f,0.0209324f},{0.0201493f,0.0201660f,0.0206889f},{0.0201169f,0.0201761f,0.0210665f},
	{0.0202129f,0.0203570f,0.0211424f},{0.0203294f,0.0204631f,0.0212793f},{0.0205300f,0.0205771f,0.0215124f},{0.0206476f,0.0207539f,0.0216801f},
	{0.0208505f,0.0209069f,0.0218723f},{0.0210667f,0.0210719f,0.0221546f},{0.0213139f,0.0213352f,0.0223720f},{0.0214982f,0.0216384f,0.0226879f},
	{0.0216405f,0.0218041f,0.0229889f},{0.0216943f,0.0219157f,0.0231035f},{0.0216518f,0.0219014f,0.0230581f},{0.0215197f,0.0216378f,0.0230841f},
	{0.0216666f,0.0215010f,0.0227919f},{0.0216366f,0.0215776f,0.0225105f},{0.0214546f,0.0218713f,0.0227365f},{0.0213670f,0.0222803f,0.0240671f},
	{0.0223983f,0.0227858f,0.0257141f},{0.0253594f,0.0242333f,0.0259370f},{0.0285636f,0.0272741f,0.0265484f},{0.0305259f,0.0306110f,0.0307779f},
	{0.0318037f,0.0337719f,0.0374759f},{0.0336092f,0.0369436f,0.0426845f},{0.0369699f,0.0399600f,0.0437239f},{0.0416985f,0.0409159f,0.0422391f},
	{0.0424136f,0.0396903f,0.0455286f},{0.0402222f,0.0391958f,0.0475554f},{0.0378727f,0.0386031f,0.0459062f},{0.0356715f,0.0373808f,0.0416670f},
	{0.0335965f,0.0354995f,0.0361359f},{0.0314811f,0.0329039f,0.0301666f},{0.0292109f,0.0297348f,0.0244858f},{0.0270084f,0.0263174f,0.0194959f},
	{0.0248090f,0.0229474f,0.0152275f},{0.0224689f,0.0196964f,0.0121486f},{0.0201564f,0.0167106f,0.0100156f},{0.0175868f,0.0143794f,0.0087803f},
	{0.0153064f,0.0122486f,0.0081226f},{0.0130932f,0.0107233f,0.0077290f},{0.0113069f,0.0095779f,0.0073169f},{0.0100432f,0.0086452f,0.0067894f},
	{0.0089595f,0.0080775f,0.0062980f},{0.0082885f,0.0075870f,0.0058615f},{0.0078319f,0.0072017f,0.0055937f},{0.0074049f,0.0070430f,0.0053692f},
	{0.0071219f,0.0068544f,0.0053216f},{0.0069043f,0.0067158f,0.0054299f},{0.0067601f,0.0067086f,0.0055066f},{0.0066024f,0.0066757f,0.0057728f},
	{0.0064930f,0.0066441f,0.0060574f},{0.0064624f,0.0066473f,0.0063035f},{0.0064003f,0.0066010f,0.0066213f},{0.0063443f,0.0065732f,0.0069372f},
	{0.0063140f,0.0065682f,0.0071310f},{0.0063149f,0.0064536f,0.0073262f},{0.0063147f,0.0063390f,0.0074955f},{0.0062966f,0.0063133f,0.0074396f},
	{0.0063465f,0.0062267f,0.0072221f},{0.0063956f,0.0060753f,0.0069643f},{0.0062883f,0.0060743f,0.0066724f},{0.0060943f,0.0060623f,0.0063417f},
	{0.0058428f,0.0059284f,0.0061384f},{0.0054925f,0.0057539f,0.0060386f},{0.0052123f,0.0054768f,0.0058996f},{0.0050023f,0.0051626f,0.0057285f},
	{0.0048155f,0.0049411f,0.0054104f},{0.0046674f,0.0047476f,0.0049896f},{0.0045248f,0.0045415f,0.0045924f},{0.0043942f,0.0043148f,0.0042832f},
	{0.0042206f,0.0040909f,0.0040836f},{0.0039960f,0.0038939f,0.0040541f},{0.0038398f,0.0037475f,0.0039793f},{0.0036463f,0.0036817f,0.0039165f},
	{0.0035435f,0.0036322f,0.0037924f},{0.0034643f,0.0035784f,0.0037365f},{0.0034437f,0.0035449f,0.0036475f},{0.0034773f,0.0035401f,0.0035538f},
	{0.0035063f,0.0034976f,0.0035417f},{0.0035185f,0.0034714f,0.0035604f},{0.0035259f,0.0034673f,0.0035952f},{0.0035257f,0.0035249f,0.0035766f},
	{0.0034967f,0.0035621f,0.0036158f},{0.0035521f,0.0035683f,0.0036274f},{0.0036101f,0.0035899f,0.0036444f},{0.0035973f,0.0036532f,0.0036694f},
	{0.0036703f,0.0036840f,0.0036304f},{0.0036877f,0.0037146f,0.0036897f},{0.0037198f,0.0037459f,0.0037449f},{0.0037823f,0.0037699f,0.0037954f},
	{0.0038308f,0.0038317f,0.0038422f},{0.0039078f,0.0038989f,0.0038605f},{0.0039762f,0.0039755f,0.0039037f},{0.0040501f,0.0040440f,0.0039889f},
	{0.0041286f,0.0041110f,0.0040738f},{0.0042010f,0.0041861f,0.0041879f},{0.0043055f,0.0042996f,0.0042760f},{0.0044459f,0.0044181f,0.0043345f},
	{0.0045289f,0.0045513f,0.0044407f},{0.0046682f,0.0046785f,0.0045716f},{0.0048429f,0.0047960f,0.0047242f},{0.0049467f,0.0049284f,0.0049289f},
	{0.0051411f,0.0050835f,0.0050588f},{0.0053376f,0.0052844f,0.0051971f},{0.0055005f,0.0055160f,0.0053949f},{0.0057497f,0.0057083f,0.0055752f},
	{0.0059671f,0.0058966f,0.0058155f},{0.0061822f,0.0061415f,0.0060994f},{0.0064862f,0.0063905f,0.0063465f},{0.0067658f,0.0066543f,0.0065775f},
	{0.0070646f,0.0069718f,0.0068424f},{0.0074026f,0.0073321f,0.0071121f},{0.0077460f,0.0076491f,0.0074370f},{0.0081045f,0.0079829f,0.0078313f},
	{0.0084807f,0.0083804f,0.0082345f},{0.0088748f,0.0087682f,0.0086382f},{0.0093239f,0.0091845f,0.0090605f},{0.0097639f,0.0096774f,0.0095580f},
	{0.0102399f,0.0102000f,0.0100835f},{0.0107864f,0.0107286f,0.0105877f},{0.0113465f,0.0112575f,0.0111053f},{0.0119300f,0.0118252f,0.0117308f},
	{0.0125832f,0.0124142f,0.0123588f},{0.0132088f,0.0130863f,0.0129743f},{0.0138963f,0.0137793f,0.0136338f},{0.0146992f,0.0145389f,0.0144320f},
	{0.0154498f,0.0153863f,0.0153605f},{0.0162398f,0.0161817f,0.0162615f},{0.0170631f,0.0170312f,0.0172284f},{0.0179946f,0.0179343f,0.0181524f},
	{0.0189786f,0.0189352f,0.0191242f},{0.0200551f,0.0199720f,0.0201892f},{0.0211592f,0.0210701f,0.0213383f},{0.0223420f,0.0221827f,0.0224958f},
	{0.0235333f,0.0234137f,0.0237830f},{0.0248090f,0.0246943f,0.0251320f},{0.0261945f,0.0260247f,0.0265871f},{0.0276207f,0.0274714f,0.0280503f},
	{0.0290507f,0.0290307f,0.0296245f},{0.0306093f,0.0306359f,0.0312604f},{0.0323196f,0.0323290f,0.0330100f},{0.0340130f,0.0341022f,0.0348540f},
	{0.0357986f,0.0359410f,0.0367192f},{0.0377687f,0.0378476f,0.0387645f},{0.0398015f,0.0398522f,0.0408779f},{0.0418963f,0.0420873f,0.0431037f},
	{0.0441753f,0.0443893f,0.0455318f},{0.0464853f,0.0467236f,0.0480250f},{0.0487643f,0.0490946f,0.0504524f},{0.0514817f,0.0518558f,0.0532053f},
	{0.0542856f,0.0545423f,0.0561653f},{0.0569746f,0.0573795f,0.0589477f},{0.0599364f,0.0605003f,0.0621046f},{0.0630488f,0.0636892f,0.0654847f},
	{0.0664350f,0.0669186f,0.0687754f},{0.0697994f,0.0704281f,0.0723926f},{0.0731624f,0.0742274f,0.0763495f},{0.0773070f,0.0778332f,0.0801195f},
	{0.0809670f,0.0817563f,0.0844040f},{0.0851512f,0.0857922f,0.0885965f},{0.0896858f,0.0902517f,0.0930719f},{0.0943051f,0.0949138f,0.0977714f},
	{0.0991095f,0.0999441f,0.1026121f},{0.1041425f,0.1050581f,0.1073797f},{0.1093879f,0.1102643f,0.1126099f},{0.1148228f,0.1156628f,0.1181286f},
	{0.1205066f,0.1215447f,0.1239832f},{0.1266109f,0.1277913f,0.1301154f},{0.1331452f,0.1341359f,0.1363925f},{0.1395983f,0.1408692f,0.1429208f},
	{0.1464025f,0.1477273f,0.1500624f},{0.1535988f,0.1546583f,0.1574475f},{0.1610826f,0.1621269f,0.1651605f},{0.1689162f,0.1701480f,0.1733723f},
	{0.1771218f,0.1788331f,0.1816968f},{0.1856313f,0.1872286f,0.1902773f},{0.1946429f,0.1959120f,0.1996646f},{0.2039063f,0.2054203f,0.2093500f},
	{0.2137415f,0.2156009f,0.2193193f},{0.2235259f,0.2255167f,0.2295558f},{0.2338817f,0.2363680f,0.2396793f},{0.2452283f,0.2476019f,0.2511006f},
	{0.2569391f,0.2590848f,0.2639725f},{0.2678999f,0.2698995f,0.2751840f},{0.2818428f,0.2836042f,0.2879891f},{0.2960271f,0.2995766f,0.3033464f},
	{0.3112231f,0.3122473f,0.3165017f},{0.3228650f,0.3248538f,0.3293713f},{0.3348732f,0.3376066f,0.3423992f},{0.3516726f,0.3522242f,0.3570717f},
	{0.3681865f,0.3716717f,0.3756021f},{0.3869229f,0.3900716f,0.3935446f},{0.4048009f,0.4075302f,0.4118862f},{0.4221288f,0.4248460f,0.4297586f},
	{0.4404240f,0.4425835f,0.4468390f},{0.4592612f,0.4617402f,0.4650468f},{0.4797899f,0.4823804f,0.4852499f},{0.5007379f,0.5036783f,0.5060265f},
	{0.5217986f,0.5246699f,0.5271492f},{0.5437520f,0.5466333f,0.5492185f},{0.5688096f,0.5715461f,0.5733410f},{0.5944293f,0.5970055f,0.5981997f},
	{0.6191820f,0.6221299f,0.6225894f},{0.6441680f,0.6466111f,0.6462080f},{0.6714817f,0.6741464f,0.6729918f},{0.7031998f,0.7065711f,0.7042116f},
	{0.7365131f,0.7395179f,0.7375899f},{0.7669556f,0.7678481f,0.7651409f},{0.7923546f,0.7947310f,0.7894667f},{0.8253652f,0.8260375f,0.8227087f},
	{0.8700112f,0.8704547f,0.8652001f},{0.9187462f,0.9193213f,0.9118008f},{0.9655923f,0.9656815f,0.9566679f},{1.0165232f,1.0158790f,1.0030028f},
	{1.0787528f,1.0762704f,1.0635377f},{1.1552630f,1.1513108f,1.1342960f},{1.2444470f,1.2391912f,1.2150273f},{1.3536027f,1.3444312f,1.3192180f},
	{1.4988117f,1.4856045f,1.4484789f},{1.6567211f,1.6387117f,1.5892400f},{1.8358176f,1.8046182f,1.7386553f},{2.0201650f,1.9860623f,1.8924951f},
	{2.2228588f,2.1631407f,2.0433780f},{2.4066105f,2.3397577f,2.2116905f},{2.5782606f,2.5083478f,2.3701050f},{2.7343160f,2.6579848f,2.5114088f},
	{2.8627189f,2.7844987f,2.6296149f},{2.9595886f,2.8773077f,2.7190682f},{3.0169300f,2.9342684f,2.7724102f},{3.0347393f,2.9511577f,2.7897403f}
};

//preintegrated cumulative distribution (from 1D pdf)
static const dfloat3 miecdf[] = {
	{0.0000000f,0.0000000f,0.0000000f},{0.0000356f,0.0000381f,0.0000384f},{0.0001203f,0.0001282f,0.0001325f},{0.0002839f,0.0002817f,0.0002870f},
	{0.0005286f,0.0005119f,0.0005006f},{0.0007924f,0.0007684f,0.0007428f},{0.0010477f,0.0010179f,0.0009806f},{0.0012936f,0.0012589f,0.0012119f},
	{0.0015368f,0.0014973f,0.0014469f},{0.0017847f,0.0017415f,0.0016844f},{0.0020392f,0.0019914f,0.0019327f},{0.0023024f,0.0022507f,0.0021906f},
	{0.0025768f,0.0025231f,0.0024584f},{0.0028631f,0.0028070f,0.0027430f},{0.0031607f,0.0031034f,0.0030404f},{0.0034701f,0.0034112f,0.0033504f},
	{0.0037924f,0.0037307f,0.0036735f},{0.0041267f,0.0040644f,0.0040095f},{0.0044743f,0.0044118f,0.0043617f},{0.0048367f,0.0047737f,0.0047293f},
	{0.0052139f,0.0051506f,0.0051121f},{0.0056053f,0.0055432f,0.0055127f},{0.0060119f,0.0059527f,0.0059319f},{0.0064369f,0.0063783f,0.0063695f},
	{0.0068809f,0.0068215f,0.0068232f},{0.0073412f,0.0072834f,0.0072990f},{0.0078205f,0.0077643f,0.0077964f},{0.0083199f,0.0082647f,0.0083144f},
	{0.0088383f,0.0087857f,0.0088570f},{0.0093777f,0.0093288f,0.0094213f},{0.0099394f,0.0098930f,0.0100097f},{0.0105239f,0.0104797f,0.0106228f},
	{0.0111312f,0.0110894f,0.0112603f},{0.0117632f,0.0117223f,0.0119240f},{0.0124206f,0.0123802f,0.0126148f},{0.0131034f,0.0130655f,0.0133335f},
	{0.0138101f,0.0137772f,0.0140818f},{0.0145386f,0.0145122f,0.0148567f},{0.0152859f,0.0152676f,0.0156526f},{0.0160485f,0.0160367f,0.0164677f},
	{0.0168296f,0.0168170f,0.0172975f},{0.0176310f,0.0176143f,0.0181360f},{0.0184465f,0.0184365f,0.0189923f},{0.0192746f,0.0192903f,0.0198974f},
	{0.0201389f,0.0201804f,0.0208806f},{0.0211016f,0.0211282f,0.0219218f},{0.0222104f,0.0221873f,0.0230011f},{0.0234491f,0.0234009f,0.0242030f},
	{0.0247807f,0.0247764f,0.0256612f},{0.0262040f,0.0263151f,0.0274055f},{0.0277674f,0.0280186f,0.0293197f},{0.0295406f,0.0298416f,0.0312574f},
	{0.0314690f,0.0316896f,0.0332697f},{0.0333950f,0.0335283f,0.0354394f},{0.0352448f,0.0353711f,0.0376533f},{0.0370143f,0.0371994f,0.0397605f},
	{0.0387067f,0.0389800f,0.0416615f},{0.0403206f,0.0406764f,0.0433059f},{0.0418478f,0.0422527f,0.0446812f},{0.0432827f,0.0436834f,0.0458038f},
	{0.0446237f,0.0449583f,0.0467025f},{0.0458639f,0.0460770f,0.0474206f},{0.0469969f,0.0470447f,0.0480098f},{0.0480131f,0.0478817f,0.0485159f},
	{0.0489099f,0.0486077f,0.0489767f},{0.0496937f,0.0492418f,0.0494143f},{0.0503752f,0.0498088f,0.0498345f},{0.0509786f,0.0503238f,0.0502332f},
	{0.0515217f,0.0508018f,0.0506073f},{0.0520202f,0.0512545f,0.0509587f},{0.0524911f,0.0516866f,0.0512934f},{0.0529410f,0.0521072f,0.0516171f},
	{0.0533744f,0.0525218f,0.0519361f},{0.0537970f,0.0529307f,0.0522600f},{0.0542128f,0.0533391f,0.0525928f},{0.0546233f,0.0537503f,0.0529394f},
	{0.0550293f,0.0541633f,0.0533062f},{0.0554347f,0.0545792f,0.0536930f},{0.0558407f,0.0549975f,0.0541010f},{0.0562465f,0.0554169f,0.0545328f},
	{0.0566530f,0.0558389f,0.0549845f},{0.0570618f,0.0562604f,0.0554525f},{0.0574739f,0.0566779f,0.0559362f},{0.0578886f,0.0570939f,0.0564273f},
	{0.0583075f,0.0575094f,0.0569131f},{0.0587327f,0.0579200f,0.0573866f},{0.0591591f,0.0583284f,0.0578450f},{0.0595782f,0.0587392f,0.0582855f},
	{0.0599849f,0.0591478f,0.0587108f},{0.0603737f,0.0595484f,0.0591285f},{0.0607432f,0.0599361f,0.0595405f},{0.0610979f,0.0603056f,0.0599444f},
	{0.0614409f,0.0606585f,0.0603335f},{0.0617741f,0.0609990f,0.0606989f},{0.0620988f,0.0613272f,0.0610375f},{0.0624157f,0.0616418f,0.0613528f},
	{0.0627233f,0.0619420f,0.0616516f},{0.0630182f,0.0622285f,0.0619437f},{0.0633008f,0.0625041f,0.0622334f},{0.0635720f,0.0627733f,0.0625195f},
	{0.0638337f,0.0630395f,0.0628001f},{0.0640899f,0.0633031f,0.0630754f},{0.0643435f,0.0635646f,0.0633465f},{0.0645986f,0.0638258f,0.0636119f},
	{0.0648570f,0.0640861f,0.0638744f},{0.0651178f,0.0643449f,0.0641382f},{0.0653803f,0.0646035f,0.0644048f},{0.0656440f,0.0648649f,0.0646730f},
	{0.0659074f,0.0651308f,0.0649428f},{0.0661726f,0.0653990f,0.0652153f},{0.0664428f,0.0656691f,0.0654897f},{0.0667154f,0.0659431f,0.0657664f},
	{0.0669911f,0.0662214f,0.0660433f},{0.0672708f,0.0665027f,0.0663216f},{0.0675531f,0.0667870f,0.0666049f},{0.0678395f,0.0670739f,0.0668928f},
	{0.0681307f,0.0673647f,0.0671850f},{0.0684273f,0.0676610f,0.0674802f},{0.0687299f,0.0679632f,0.0677782f},{0.0690384f,0.0682715f,0.0680816f},
	{0.0693532f,0.0685854f,0.0683919f},{0.0696742f,0.0689051f,0.0687103f},{0.0700023f,0.0692324f,0.0690368f},{0.0703401f,0.0695689f,0.0693692f},
	{0.0706868f,0.0699154f,0.0697082f},{0.0710422f,0.0702721f,0.0700565f},{0.0714100f,0.0706385f,0.0704160f},{0.0717886f,0.0710146f,0.0707893f},
	{0.0721787f,0.0714018f,0.0711756f},{0.0725840f,0.0718028f,0.0715723f},{0.0730030f,0.0722204f,0.0719818f},{0.0734378f,0.0726542f,0.0724059f},
	{0.0738905f,0.0731025f,0.0728459f},{0.0743595f,0.0735672f,0.0733059f},{0.0748481f,0.0740506f,0.0737859f},{0.0753587f,0.0745532f,0.0742840f},
	{0.0758910f,0.0750777f,0.0748005f},{0.0764471f,0.0756275f,0.0753369f},{0.0770286f,0.0762026f,0.0758954f},{0.0776360f,0.0768016f,0.0764805f},
	{0.0782705f,0.0774276f,0.0770952f},{0.0789331f,0.0780824f,0.0777394f},{0.0796265f,0.0787664f,0.0784138f},{0.0803522f,0.0794835f,0.0791217f},
	{0.0811109f,0.0802374f,0.0798667f},{0.0819063f,0.0810292f,0.0806487f},{0.0827414f,0.0818587f,0.0814673f},{0.0836171f,0.0827272f,0.0823264f},
	{0.0845365f,0.0836363f,0.0832300f},{0.0855009f,0.0845898f,0.0841773f},{0.0865109f,0.0855910f,0.0851689f},{0.0875728f,0.0866425f,0.0862111f},
	{0.0886883f,0.0877497f,0.0873134f},{0.0898562f,0.0889132f,0.0884790f},{0.0910787f,0.0901325f,0.0897084f},{0.0923603f,0.0914107f,0.0910019f},
	{0.0937061f,0.0927527f,0.0923587f},{0.0951204f,0.0941625f,0.0937833f},{0.0966068f,0.0956427f,0.0952811f},{0.0981680f,0.0971950f,0.0968543f},
	{0.0998062f,0.0988233f,0.0985070f},{0.1015235f,0.1005323f,0.1002448f},{0.1033256f,0.1023244f,0.1020722f},{0.1052164f,0.1042040f,0.1039921f},
	{0.1071962f,0.1061779f,0.1060070f},{0.1092680f,0.1082500f,0.1081215f},{0.1114400f,0.1104233f,0.1103399f},{0.1137150f,0.1127017f,0.1126676f},
	{0.1160938f,0.1150884f,0.1151065f},{0.1185838f,0.1175859f,0.1176615f},{0.1211911f,0.1201977f,0.1203387f},{0.1239178f,0.1229325f,0.1231417f},
	{0.1267695f,0.1257977f,0.1260785f},{0.1297507f,0.1287938f,0.1291551f},{0.1328587f,0.1319204f,0.1323686f},{0.1361038f,0.1351884f,0.1357244f},
	{0.1394998f,0.1386047f,0.1392363f},{0.1430424f,0.1421684f,0.1429018f},{0.1467329f,0.1458897f,0.1467233f},{0.1505811f,0.1497756f,0.1507158f},
	{0.1545961f,0.1538255f,0.1548790f},{0.1587812f,0.1580449f,0.1592160f},{0.1631313f,0.1624466f,0.1637422f},{0.1676652f,0.1670285f,0.1684572f},
	{0.1723867f,0.1717893f,0.1733654f},{0.1772914f,0.1767364f,0.1784736f},{0.1823993f,0.1818797f,0.1837814f},{0.1877168f,0.1872312f,0.1892973f},
	{0.1932450f,0.1928008f,0.1950250f},{0.1989887f,0.1985940f,0.2009595f},{0.2049529f,0.2046084f,0.2071045f},{0.2111411f,0.2108441f,0.2134732f},
	{0.2175571f,0.2173114f,0.2200744f},{0.2242104f,0.2240246f,0.2269161f},{0.2311147f,0.2309867f,0.2340003f},{0.2382692f,0.2382007f,0.2413275f},
	{0.2456707f,0.2456695f,0.2489102f},{0.2533278f,0.2533876f,0.2567594f},{0.2612463f,0.2613592f,0.2648778f},{0.2694301f,0.2695997f,0.2732738f},
	{0.2778846f,0.2781262f,0.2819494f},{0.2866128f,0.2869342f,0.2909000f},{0.2956200f,0.2960095f,0.3001367f},{0.3049093f,0.3053638f,0.3096704f},
	{0.3144841f,0.3150161f,0.3194985f},{0.3243402f,0.3249592f,0.3296168f},{0.3344723f,0.3351907f,0.3400116f},{0.3448973f,0.3457216f,0.3506911f},
	{0.3556253f,0.3565464f,0.3616954f},{0.3666283f,0.3676365f,0.3729993f},{0.3779325f,0.3790182f,0.3845802f},{0.3895809f,0.3907739f,0.3965007f},
	{0.4015736f,0.4028572f,0.4087430f},{0.4138357f,0.4151778f,0.4212337f},{0.4262827f,0.4277145f,0.4339470f},{0.4389887f,0.4404814f,0.4468929f},
	{0.4520089f,0.4535750f,0.4601457f},{0.4653477f,0.4670312f,0.4737333f},{0.4789966f,0.4807817f,0.4876193f},{0.4928987f,0.4947756f,0.5017695f},
	{0.5070284f,0.5089855f,0.5161301f},{0.5213769f,0.5234083f,0.5306741f},{0.5359445f,0.5380548f,0.5454170f},{0.5507264f,0.5529204f,0.5603618f},
	{0.5656918f,0.5679711f,0.5754837f},{0.5808155f,0.5831768f,0.5907619f},{0.5961122f,0.5985510f,0.6061969f},{0.6115864f,0.6140961f,0.6217824f},
	{0.6271864f,0.6297675f,0.6374756f},{0.6428568f,0.6455051f,0.6532145f},{0.6585810f,0.6612906f,0.6689820f},{0.6743864f,0.6771658f,0.6848174f},
	{0.6902834f,0.6931334f,0.7007383f},{0.7061965f,0.7090881f,0.7166445f},{0.7219848f,0.7249098f,0.7323861f},{0.7376193f,0.7405741f,0.7479679f},
	{0.7532209f,0.7561862f,0.7635017f},{0.7688527f,0.7718273f,0.7790317f},{0.7844440f,0.7874244f,0.7944926f},{0.7999205f,0.8028968f,0.8097947f},
	{0.8153014f,0.8182552f,0.8249656f},{0.8306545f,0.8335643f,0.8400709f},{0.8460199f,0.8488710f,0.8551145f},{0.8614331f,0.8641989f,0.8701501f},
	{0.8770111f,0.8796550f,0.8852662f},{0.8927547f,0.8952432f,0.9004229f},{0.9085281f,0.9107947f,0.9154536f},{0.9241170f,0.9261198f,0.9301344f},
	{0.9392586f,0.9409269f,0.9441807f},{0.9535816f,0.9548586f,0.9573461f},{0.9666355f,0.9675546f,0.9693452f},{0.9780209f,0.9786268f,0.9798074f},
	{0.9873523f,0.9877007f,0.9883790f},{0.9942868f,0.9944442f,0.9947498f},{0.9985582f,0.9985978f,0.9986748f},{1.0000000f,1.0000000f,1.0000000f}
};

static const uint miedl = sizeof(miepdf)/sizeof(miepdf[0]);

inline void SamplingBasis(const sfloat4 &iv, sfloat4 *pb1, sfloat4 *pb2){
	//TODO: Should probably handle zero-cases. Might even fix something.
	pb1->v[0] = -iv.v[2];
	pb1->v[1] = sfloat1::zero();
	pb1->v[2] = iv.v[0];
	pb1->v[3] = sfloat1::zero();
	*pb1 /= sfloat4::length3(iv.swizzle<0,3,2,3>()); //assume iv.w to be zero
	*pb2 = sfloat4::cross3(iv,*pb1);
}

namespace KernelSampler{

PhaseFunction::PhaseFunction(){
	//
}

PhaseFunction::~PhaseFunction(){
	//
}

HGPhase::HGPhase(float _g) : g1(_g){
	//
}

HGPhase::~HGPhase(){
	//
}

sfloat1 HGPhase::Evaluate(const sfloat1 &ct) const{
	sfloat1 g = sfloat1(g1);
	sfloat1 e = sfloat1(1.50f);
	return (1.0f-g*g)/(4.0f*SM_PI*sfloat1::pow(1.0f+g*g-2.0f*g*ct,e));
}

sfloat4 HGPhase::EvaluateRGB(const sfloat1 &ct) const{
	//return sfloat4(HGPhase::Evaluate(ct));
	sfloat1 phase = HGPhase::Evaluate(ct);
	sfloat4 r;
	r.v[0] = phase;
	r.v[1] = phase;
	r.v[2] = phase;
	r.v[3] = phase;
	return r;
}

sfloat4 HGPhase::Sample(const sfloat4 &iv, const sfloat1 &u1, const sfloat1 &u2) const{
	sfloat1 g = sfloat1(g1);
	sfloat1 sq = (1.0f-g*g)/(1.0f-g+2.0f*g*u1);
	sfloat1 ct = (1.0f+g*g-sq*sq)/(2.0f*g);
	sfloat1 st = sfloat1::sqrt(sfloat1::max(1.0f-ct*ct,sfloat1::zero()));
	sfloat1 ph = 2.0f*SM_PI*u2;

	sfloat4 b1, b2;
	SamplingBasis(iv,&b1,&b2);
	sfloat1 sph, cph;
	sincos_ps(ph.v,&sph.v,&cph.v);
	return b1*st*cph+b2*st*sph+iv*ct;
}

HGPhase HGPhase::ghg(0.75f);

MiePhase::MiePhase(){
	//
}

MiePhase::~MiePhase(){
	//
}

sfloat1 MiePhase::Evaluate(const sfloat1 &ct) const{
	sfloat1 ct1 = sfloat1::saturate2(ct); //hack rare abs(ct) > 1 cases
	sfloat1 a = sfloat1::acos(-ct1)/SM_PI;
	sfloat1 b = sfloat1((float)miedl*a);
	sfloat1 c = sfloat1::floor(b);
	c = sfloat1::min(c,(float)(miedl-2));
	c = sfloat1::max(c,0.0f);
	sfloat1 t = b-c; //frac(b)
	dfloatN X = dfloatN(c);
	dfloatN MA, MB;
	for(uint i = 0; i < BLCLOUD_VSIZE; ++i){
		MA.v[i] = miepdf[(uint)X.v[i]+0].x;
		MB.v[i] = miepdf[(uint)X.v[i]+1].x;
	}
	sfloat1 ma = sfloat1::load(&MA);
	sfloat1 mb = sfloat1::load(&MB);
	return sfloat1::lerp(ma,mb,t);
}

sfloat4 MiePhase::EvaluateRGB(const sfloat1 &ct) const{
	sfloat1 ct1 = sfloat1::saturate2(ct);
	sfloat1 a = sfloat1::acos(-ct1)/SM_PI;
	sfloat1 b = sfloat1((float)miedl*a);
	sfloat1 c = sfloat1::floor(b);
	c = sfloat1::min(c,(float)(miedl-2));
	c = sfloat1::max(c,0.0f);
	sfloat1 t = b-c; //frac(b)
	dfloatN X = dfloatN(c);
	sfloat4 ph;
	for(uint i = 0; i < 3; ++i){
		dfloatN MA, MB;
		for(uint j = 0; j < BLCLOUD_VSIZE; ++j){
			MA.v[j] = miepdf[(uint)X.v[j]+0][i];
			MB.v[j] = miepdf[(uint)X.v[j]+1][i];
		}
		sfloat1 ma = sfloat1::load(&MA);
		sfloat1 mb = sfloat1::load(&MB);
		ph.v[i] = sfloat1::lerp(ma,mb,t);
	}
	ph.v[3] = sfloat1::one();

	return ph;
}

sfloat4 MiePhase::Sample(const sfloat4 &iv, const sfloat1 &u1, const sfloat1 &u2) const{
	sfloat1 th = sfloat1::zero();
	sfloat1 ub = sfloat1((float)miedl*u1);
	for(uint i = 0; i < miedl-1; ++i){
		sfloat1 cdf0 = sfloat1(miecdf[i+0].x);
		sfloat1 cdf1 = sfloat1(miecdf[i+1].x);
		sfloat1 b = sfloat1::max(ub,(float)i);
		sfloat1 c = sfloat1::min(sfloat1::floor(b),(float)(miedl-1));
		sfloat1 t = b-c;
		sfloat1 cdf = sfloat1::lerp(cdf0,cdf1,t);
		sfloat1 m = sfloat1::Less(cdf,u1);
		sfloat1 s = sfloat1((float)i/(float)miedl)+t/(float)miedl;
		th = sfloat1::Or(sfloat1::And(m,s),sfloat1::AndNot(m,th));
		if(m.AllFalse())
			break;
	}
	th *= SM_PI;
	sfloat1 ph = 2.0f*SM_PI*u2;

	sfloat4 b1, b2;
	SamplingBasis(iv,&b1,&b2);
	sfloat1 ct = -cos_ps(th.v);
	sfloat1 st = sfloat1::sqrt(sfloat1::max(1.0f-ct*ct,sfloat1::zero()));
	sfloat1 sph, cph;
	sincos_ps(ph.v,&sph.v,&cph.v);

	return b1*st*cph+b2*st*sph+iv*ct;
}

MiePhase MiePhase::gmie;

BaseLight::BaseLight(){
	lights.push_back(this);
}

BaseLight::~BaseLight(){
	//
}

void BaseLight::DeleteAll(){
	for(uint i = 0; i < lights.size(); ++i)
		delete lights[i];
	lights.clear();
}

std::vector<BaseLight *> BaseLight::lights;

SunLight::SunLight(const dfloat3 *pd, const dfloat3 *pc, float _angle) : direction(*pd), color(*pc), angle(_angle){
	cosAngle = cosf(_angle);
}

SunLight::~SunLight(){
	//
}

sfloat4 SunLight::Evaluate(const sfloat4 &rd) const{
	sfloat1 ctm = cosAngle;
	sfloat4 lc = sfloat4::zero();
	sfloat1 lt = sfloat1::Greater(sfloat4::dot3(rd,sfloat4(float4::load(&direction))),ctm);

	float4 c = float4::load(&color);
	lc.v[0] = sfloat1::And(lt,c.splatN<0>());
	lc.v[1] = sfloat1::And(lt,c.splatN<1>());
	lc.v[2] = sfloat1::And(lt,c.splatN<2>());

	return lc;
}

sfloat1 SunLight::Pdf(const sfloat4 &iv) const{
	sfloat1 ctm = cosAngle;
	sfloat1 lt = sfloat1::Greater(sfloat4::dot3(iv,sfloat4(float4::load(&direction))),ctm);
	return sfloat1::And(lt,sfloat1(1.0f/(2.0f*SM_PI*(1.0f-ctm*ctm))));
}

sfloat4 SunLight::Sample(const sfloat4 &iv, const sfloat1 &u1, const sfloat1 &u2) const{
	sfloat1 ctm = cosAngle;
	sfloat1 ct = (1.0f-u1)+u1*ctm;
	sfloat1 st = sfloat1::sqrt(1.0f-ct*ct);
	sfloat1 ph = 2.0f*SM_PI*u2;

	sfloat4 b1, b2;
	sfloat4 lrd = sfloat4(float4::load(&direction));
	SamplingBasis(lrd,&b1,&b2);
	sfloat1 sph, cph;
	sincos_ps(ph.v,&sph.v,&cph.v);

	return b1*st*cph+b2*st*sph+lrd*ct;
}

BaseEnv::BaseEnv(){
	//
}

BaseEnv::~BaseEnv(){
	//
}

NullEnv::NullEnv(){
	//
}

NullEnv::~NullEnv(){
	//
}

sfloat4 NullEnv::Evaluate(const sfloat4 &rd) const{
	return sfloat4(0.0f);
}

NullEnv NullEnv::nenv;

MapEnv::MapEnv(){
	//
}

MapEnv::~MapEnv(){
	//
}

dfloat4 * MapEnv::Initialize(uint w, uint h){
	ptex = new dfloat4[w*h];
	this->w = w;
	this->h = h;
	return ptex;
}

sfloat4 MapEnv::Evaluate(const sfloat4 &rd) const{
	sfloat1 tha = sfloat1::acos(-rd.v[2])/SM_PI;
	sfloat1 thb = sfloat1((float)h*sfloat1::saturate(tha));
	sfloat1 thc = sfloat1::floor(thb);
	thc = sfloat1::min(thc,(float)(h-2));
	thc = sfloat1::max(thc,0.0f);
	sfloat1 tht = thb-thc;
	dfloatN thX = dfloatN(thc);

	sfloat1 pha = 0.5+sfloat1::atan2(rd.v[1],-rd.v[0])/sfloat1(2.0f*SM_PI);
	sfloat1 phb = sfloat1((float)w*sfloat1::saturate(pha));
	sfloat1 phc = sfloat1::floor(phb);
	phc = sfloat1::min(phc,(float)(w-2));
	phc = sfloat1::max(phc,0.0f);
	sfloat1 pht = phb-phc;
	dfloatN phX = dfloatN(phc);

	sfloat4 ce;
	for(uint i = 0; i < 3; ++i){
		dfloatN CA, CB, DA, DB;
		for(uint j = 0; j < BLCLOUD_VSIZE; ++j){
			CA.v[j] = ptex[(uint)(w*thX.v[j]+phX.v[j])][i];
			CB.v[j] = ptex[(uint)(w*(thX.v[j]+1)+phX.v[j])][i];
			DA.v[j] = ptex[(uint)(w*thX.v[j]+phX.v[j]+1)][i];
			DB.v[j] = ptex[(uint)(w*(thX.v[j]+1)+phX.v[j]+1)][i];
		}
		sfloat1 ca = sfloat1::load(&CA);
		sfloat1 cb = sfloat1::load(&CB);
		sfloat1 da = sfloat1::load(&DA);
		sfloat1 db = sfloat1::load(&DB);
		ce.v[i] = sfloat1::lerp(sfloat1::lerp(ca,cb,tht),sfloat1::lerp(da,db,tht),pht);
	}
	ce.v[3] = sfloat1::one();

	return ce;
}

void MapEnv::Destroy(){
	delete []ptex;
}

MapEnv MapEnv::genv;

}
