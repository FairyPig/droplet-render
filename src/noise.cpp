#include "main.h"
#include "node.h"
#include "noise.h"

namespace PerlinNoise{

static const dfloat3 g_perlin_data[512+2] = {
	{0.337830f,0.715698f,-0.611206f},{-0.944031f,-0.326599f,-0.045624f},{-0.101074f,-0.416443f,-0.903503f},
	{0.799286f,0.494110f,-0.341949f},{-0.854645f,0.518036f,0.033936f},{0.425140f,-0.437866f,-0.792114f},
	{-0.358948f,0.597046f,0.717377f},{-0.985413f,0.144714f,0.089294f},{-0.601776f,-0.337280f,-0.723907f},
	{-0.449921f,0.594513f,0.666382f},{0.208313f,-0.107910f,0.972076f},{0.575317f,0.060425f,0.815643f},
	{0.293365f,-0.875702f,-0.383453f},{0.293762f,0.465759f,0.834686f},{-0.846008f,-0.233398f,-0.479340f},
	{-0.115814f,0.143036f,-0.982910f},{0.204681f,-0.949036f,-0.239532f},{0.946716f,-0.263947f,0.184326f},
	{-0.235596f,0.573822f,0.784332f},{0.203705f,-0.372253f,-0.905487f},{0.756989f,-0.651031f,0.055298f},
	{0.497803f,0.814697f,-0.297363f},{-0.162140f,0.063995f,-0.984680f},{-0.329254f,0.834381f,0.441925f},
	{0.703827f,-0.527039f,-0.476227f},{0.956421f,0.266113f,0.119781f},{0.480133f,0.482849f,0.732300f},
	{-0.186310f,0.961212f,-0.203125f},{-0.748474f,-0.656921f,-0.090393f},{-0.085052f,-0.165253f,0.982544f},
	{-0.769470f,0.628174f,-0.115234f},{0.383148f,0.537659f,0.751068f},{0.616486f,-0.668488f,-0.415924f},
	{-0.259979f,-0.630005f,0.731750f},{0.570953f,-0.087952f,0.816223f},{-0.458008f,0.023254f,0.888611f},
	{-0.196167f,0.976563f,-0.088287f},{-0.263885f,-0.698120f,-0.665527f},{0.437134f,-0.892273f,-0.112793f},
	{-0.621674f,-0.230438f,0.748566f},{0.232422f,0.900574f,-0.367249f},{0.222290f,-0.796143f,0.562744f},
	{-0.665497f,-0.737640f,0.113770f},{0.670135f,0.704803f,0.232605f},{0.895599f,0.429749f,-0.114655f},
	{-0.115570f,-0.474243f,0.872742f},{0.621826f,0.604004f,-0.498444f},{-0.832214f,0.012756f,0.554260f},
	{-0.702484f,0.705994f,-0.089661f},{-0.692017f,0.649292f,0.315399f},{-0.175995f,-0.977997f,0.111877f},
	{0.096954f,-0.049530f,0.994019f},{0.635284f,-0.606689f,-0.477783f},{-0.261261f,-0.607422f,-0.750153f},
	{0.983276f,0.165436f,0.075958f},{-0.298370f,0.404083f,-0.864655f},{-0.638672f,0.507721f,0.578156f},
	{0.388214f,0.412079f,0.824249f},{0.556183f,-0.208832f,0.804352f},{0.778442f,0.562012f,0.279510f},
	{-0.616577f,0.781921f,-0.091522f},{0.196289f,0.051056f,0.979187f},{-0.121216f,0.207153f,-0.970734f},
	{-0.173401f,-0.384735f,0.906555f},{0.161499f,-0.723236f,-0.671387f},{0.178497f,-0.006226f,-0.983887f},
	{-0.126038f,0.157990f,0.979340f},{0.830475f,-0.024811f,0.556458f},{-0.510132f,-0.769440f,0.384247f},
	{0.814240f,0.200104f,-0.544891f},{-0.112549f,-0.393311f,-0.912445f},{0.561890f,0.152222f,-0.813049f},
	{0.198914f,-0.254517f,-0.946381f},{-0.412170f,0.690979f,-0.593811f},{-0.407257f,0.324524f,0.853668f},
	{-0.690186f,0.366119f,-0.624115f},{-0.428345f,0.844147f,-0.322296f},{-0.212280f,-0.297546f,-0.930756f},
	{-0.273071f,0.516113f,0.811798f},{0.928314f,0.371643f,0.007233f},{0.785828f,-0.479218f,-0.390778f},
	{-0.704895f,0.058929f,0.706818f},{0.173248f,0.203583f,0.963562f},{0.422211f,-0.904297f,-0.062469f},
	{-0.363312f,-0.182465f,0.913605f},{0.254028f,-0.552307f,-0.793945f},{-0.288910f,-0.765747f,-0.574554f},
	{0.058319f,0.291382f,0.954803f},{0.946136f,-0.303925f,0.111267f},{-0.078156f,0.443695f,-0.892731f},
	{0.182098f,0.893890f,0.409515f},{-0.680298f,-0.213318f,0.701141f},{0.062469f,0.848389f,-0.525635f},
	{-0.728790f,-0.641846f,0.238342f},{-0.880890f,0.427673f,0.202637f},{-0.532501f,-0.214050f,0.818878f},
	{0.948975f,-0.305084f,0.079620f},{0.925446f,0.374664f,0.055817f},{0.820923f,0.565491f,0.079102f},
	{0.258820f,0.099792f,-0.960724f},{-0.294617f,0.910522f,0.289978f},{0.137115f,0.320038f,-0.937408f},
	{-0.908386f,0.345276f,-0.235718f},{-0.936218f,0.138763f,0.322754f},{0.366577f,0.925934f,-0.090637f},
	{0.309296f,-0.686829f,-0.657684f},{0.669830f,0.024445f,0.742065f},{-0.917999f,-0.059113f,-0.392059f},
	{0.365509f,0.462158f,-0.807922f},{0.083374f,0.996399f,-0.014801f},{0.593842f,0.253143f,-0.763672f},
	{0.974976f,-0.165466f,0.148285f},{0.918976f,0.137299f,0.369537f},{0.294952f,0.694977f,0.655731f},
	{0.943085f,0.152618f,-0.295319f},{0.587830f,-0.598236f,0.544495f},{0.203796f,0.678223f,0.705994f},
	{-0.478821f,-0.661011f,0.577667f},{0.719055f,-0.169800f,-0.673828f},{-0.132172f,-0.965332f,0.225006f},
	{-0.981873f,-0.145020f,0.121979f},{0.763458f,0.579742f,0.284546f},{-0.893188f,0.079681f,0.442474f},
	{-0.795776f,-0.523804f,0.303802f},{0.734955f,0.678040f,-0.007446f},{0.155060f,0.986267f,-0.056183f},
	{0.258026f,0.571503f,-0.778931f},{-0.681549f,-0.702087f,-0.206116f},{-0.962860f,-0.177185f,0.203613f},
	{-0.470978f,-0.515106f,0.716095f},{-0.740326f,0.571350f,0.354095f},{-0.560120f,-0.824982f,-0.074982f},
	{-0.507874f,0.753204f,0.417969f},{-0.503113f,0.038147f,0.863342f},{0.594025f,0.673553f,-0.439758f},
	{-0.119873f,-0.005524f,-0.992737f},{0.098267f,-0.213776f,0.971893f},{-0.615631f,0.643951f,0.454163f},
	{0.896851f,-0.441071f,0.032166f},{-0.555023f,0.750763f,-0.358093f},{0.398773f,0.304688f,0.864929f},
	{-0.722961f,0.303589f,0.620544f},{-0.635590f,-0.621948f,-0.457306f},{-0.293243f,0.072327f,0.953278f},
	{-0.491638f,0.661041f,-0.566772f},{-0.304199f,-0.572083f,-0.761688f},{0.908081f,-0.398956f,0.127014f},
	{-0.523621f,-0.549683f,-0.650848f},{-0.932922f,-0.199860f,0.299408f},{0.099426f,0.140869f,0.984985f},
	{-0.020325f,-0.999756f,-0.002319f},{0.952667f,0.280853f,-0.116150f},{-0.971893f,0.082581f,0.220337f},
	{0.659210f,0.705292f,-0.260651f},{0.733063f,-0.175537f,0.657043f},{-0.555206f,0.429504f,-0.712189f},
	{0.400421f,-0.898590f,0.179352f},{0.750885f,-0.196960f,0.630341f},{0.785675f,-0.569336f,0.241821f},
	{-0.058899f,-0.464111f,0.883789f},{0.129608f,-0.945190f,0.299622f},{-0.357819f,0.907654f,0.219238f},
	{-0.842133f,-0.439117f,-0.312927f},{-0.313477f,0.844330f,0.434479f},{-0.241211f,0.053253f,0.968994f},
	{0.063873f,0.823273f,0.563965f},{0.476288f,0.862152f,-0.172516f},{0.620941f,-0.298126f,0.724915f},
	{0.252380f,-0.749359f,-0.612122f},{-0.577545f,0.386566f,0.718994f},{-0.406342f,-0.737976f,0.538696f},
	{0.047180f,0.556305f,0.829590f},{-0.802856f,0.587463f,0.101166f},{-0.707733f,-0.705963f,0.026428f},
	{0.374908f,0.684570f,0.625092f},{0.472137f,0.208405f,-0.856506f},{-0.703064f,-0.581085f,-0.409821f},
	{-0.417206f,-0.736328f,0.532623f},{-0.447876f,-0.202850f,-0.870728f},{0.086945f,-0.990417f,0.107086f},
	{0.183685f,0.018341f,-0.982788f},{0.560638f,-0.428864f,0.708282f},{0.296722f,-0.952576f,-0.067200f},
	{0.135773f,0.990265f,0.030243f},{-0.068787f,0.654724f,0.752686f},{0.762604f,-0.551758f,0.337585f},
	{-0.819611f,-0.407684f,0.402466f},{-0.727844f,-0.550720f,-0.408539f},{-0.855774f,-0.480011f,0.192810f},
	{0.693176f,-0.079285f,0.716339f},{0.226013f,0.650116f,-0.725433f},{0.246704f,0.953369f,-0.173553f},
	{-0.970398f,-0.239227f,-0.032440f},{0.136383f,-0.394318f,0.908752f},{0.813232f,0.558167f,0.164368f},
	{0.404510f,0.549042f,-0.731323f},{-0.380249f,-0.566711f,0.730865f},{0.022156f,0.932739f,0.359741f},
	{0.008240f,0.996552f,-0.082306f},{0.956635f,-0.065338f,-0.283722f},{-0.743561f,0.008209f,0.668579f},
	{-0.859589f,-0.509674f,0.035767f},{-0.852234f,0.363678f,-0.375977f},{-0.201965f,-0.970795f,-0.129150f},
	{0.313477f,0.947327f,0.065460f},{-0.254028f,-0.528259f,0.810150f},{0.628052f,0.601105f,0.494110f},
	{-0.494385f,0.868378f,0.037933f},{0.275635f,-0.086426f,0.957336f},{-0.197937f,0.468903f,-0.860748f},
	{0.895599f,0.399384f,0.195801f},{0.560791f,0.825012f,-0.069214f},{0.304199f,-0.849487f,0.431030f},
	{0.096375f,0.935760f,0.339111f},{-0.051422f,0.408966f,-0.911072f},{0.330444f,0.942841f,-0.042389f},
	{-0.452362f,-0.786407f,0.420563f},{0.134308f,-0.933472f,-0.332489f},{0.801910f,-0.566711f,-0.188934f},
	{-0.987946f,-0.105988f,0.112518f},{-0.244080f,0.892242f,-0.379791f},{-0.920502f,0.229095f,-0.316376f},
	{0.778900f,0.325958f,0.535706f},{-0.912872f,0.185211f,-0.363770f},{-0.184784f,0.565369f,-0.803833f},
	{-0.018463f,0.119537f,0.992615f},{-0.259247f,-0.935608f,0.239532f},{-0.823730f,-0.449127f,-0.345947f},
	{-0.433105f,0.659515f,0.614349f},{-0.822754f,0.378845f,-0.423676f},{0.687195f,-0.674835f,-0.268890f},
	{-0.246582f,-0.800842f,0.545715f},{-0.729187f,-0.207794f,0.651978f},{0.653534f,-0.610443f,-0.447388f},
	{0.492584f,-0.023346f,0.869934f},{0.609039f,0.009094f,-0.793060f},{0.962494f,-0.271088f,-0.008850f},
	{0.265900f,-0.004913f,0.963959f},{0.651245f,0.553619f,-0.518951f},{0.280548f,-0.843140f,0.458618f},
	{-0.175293f,-0.983215f,0.049805f},{0.035339f,-0.979919f,0.196045f},{-0.982941f,0.164307f,-0.082245f},
	{0.233734f,-0.972260f,-0.005005f},{-0.747253f,-0.611328f,0.260437f},{0.645599f,0.592773f,0.481384f},
	{0.117706f,-0.949524f,-0.290680f},{-0.535004f,-0.791901f,-0.294312f},{-0.627167f,-0.214447f,0.748718f},
	{-0.047974f,-0.813477f,-0.579590f},{-0.175537f,0.477264f,-0.860992f},{0.738556f,-0.414246f,-0.531830f},
	{0.562561f,-0.704071f,0.433289f},{-0.754944f,0.648010f,-0.100586f},{0.114716f,0.044525f,-0.992371f},
	{0.966003f,0.244873f,-0.082764f},{0.337830f,0.715698f,-0.611206f},{-0.944031f,-0.326599f,-0.045624f},
	{-0.101074f,-0.416443f,-0.903503f},{0.799286f,0.494110f,-0.341949f},{-0.854645f,0.518036f,0.033936f},
	{0.425140f,-0.437866f,-0.792114f},{-0.358948f,0.597046f,0.717377f},{-0.985413f,0.144714f,0.089294f},
	{-0.601776f,-0.337280f,-0.723907f},{-0.449921f,0.594513f,0.666382f},{0.208313f,-0.107910f,0.972076f},
	{0.575317f,0.060425f,0.815643f},{0.293365f,-0.875702f,-0.383453f},{0.293762f,0.465759f,0.834686f},
	{-0.846008f,-0.233398f,-0.479340f},{-0.115814f,0.143036f,-0.982910f},{0.204681f,-0.949036f,-0.239532f},
	{0.946716f,-0.263947f,0.184326f},{-0.235596f,0.573822f,0.784332f},{0.203705f,-0.372253f,-0.905487f},
	{0.756989f,-0.651031f,0.055298f},{0.497803f,0.814697f,-0.297363f},{-0.162140f,0.063995f,-0.984680f},
	{-0.329254f,0.834381f,0.441925f},{0.703827f,-0.527039f,-0.476227f},{0.956421f,0.266113f,0.119781f},
	{0.480133f,0.482849f,0.732300f},{-0.186310f,0.961212f,-0.203125f},{-0.748474f,-0.656921f,-0.090393f},
	{-0.085052f,-0.165253f,0.982544f},{-0.769470f,0.628174f,-0.115234f},{0.383148f,0.537659f,0.751068f},
	{0.616486f,-0.668488f,-0.415924f},{-0.259979f,-0.630005f,0.731750f},{0.570953f,-0.087952f,0.816223f},
	{-0.458008f,0.023254f,0.888611f},{-0.196167f,0.976563f,-0.088287f},{-0.263885f,-0.698120f,-0.665527f},
	{0.437134f,-0.892273f,-0.112793f},{-0.621674f,-0.230438f,0.748566f},{0.232422f,0.900574f,-0.367249f},
	{0.222290f,-0.796143f,0.562744f},{-0.665497f,-0.737640f,0.113770f},{0.670135f,0.704803f,0.232605f},
	{0.895599f,0.429749f,-0.114655f},{-0.115570f,-0.474243f,0.872742f},{0.621826f,0.604004f,-0.498444f},
	{-0.832214f,0.012756f,0.554260f},{-0.702484f,0.705994f,-0.089661f},{-0.692017f,0.649292f,0.315399f},
	{-0.175995f,-0.977997f,0.111877f},{0.096954f,-0.049530f,0.994019f},{0.635284f,-0.606689f,-0.477783f},
	{-0.261261f,-0.607422f,-0.750153f},{0.983276f,0.165436f,0.075958f},{-0.298370f,0.404083f,-0.864655f},
	{-0.638672f,0.507721f,0.578156f},{0.388214f,0.412079f,0.824249f},{0.556183f,-0.208832f,0.804352f},
	{0.778442f,0.562012f,0.279510f},{-0.616577f,0.781921f,-0.091522f},{0.196289f,0.051056f,0.979187f},
	{-0.121216f,0.207153f,-0.970734f},{-0.173401f,-0.384735f,0.906555f},{0.161499f,-0.723236f,-0.671387f},
	{0.178497f,-0.006226f,-0.983887f},{-0.126038f,0.157990f,0.979340f},{0.830475f,-0.024811f,0.556458f},
	{-0.510132f,-0.769440f,0.384247f},{0.814240f,0.200104f,-0.544891f},{-0.112549f,-0.393311f,-0.912445f},
	{0.561890f,0.152222f,-0.813049f},{0.198914f,-0.254517f,-0.946381f},{-0.412170f,0.690979f,-0.593811f},
	{-0.407257f,0.324524f,0.853668f},{-0.690186f,0.366119f,-0.624115f},{-0.428345f,0.844147f,-0.322296f},
	{-0.212280f,-0.297546f,-0.930756f},{-0.273071f,0.516113f,0.811798f},{0.928314f,0.371643f,0.007233f},
	{0.785828f,-0.479218f,-0.390778f},{-0.704895f,0.058929f,0.706818f},{0.173248f,0.203583f,0.963562f},
	{0.422211f,-0.904297f,-0.062469f},{-0.363312f,-0.182465f,0.913605f},{0.254028f,-0.552307f,-0.793945f},
	{-0.288910f,-0.765747f,-0.574554f},{0.058319f,0.291382f,0.954803f},{0.946136f,-0.303925f,0.111267f},
	{-0.078156f,0.443695f,-0.892731f},{0.182098f,0.893890f,0.409515f},{-0.680298f,-0.213318f,0.701141f},
	{0.062469f,0.848389f,-0.525635f},{-0.728790f,-0.641846f,0.238342f},{-0.880890f,0.427673f,0.202637f},
	{-0.532501f,-0.214050f,0.818878f},{0.948975f,-0.305084f,0.079620f},{0.925446f,0.374664f,0.055817f},
	{0.820923f,0.565491f,0.079102f},{0.258820f,0.099792f,-0.960724f},{-0.294617f,0.910522f,0.289978f},
	{0.137115f,0.320038f,-0.937408f},{-0.908386f,0.345276f,-0.235718f},{-0.936218f,0.138763f,0.322754f},
	{0.366577f,0.925934f,-0.090637f},{0.309296f,-0.686829f,-0.657684f},{0.669830f,0.024445f,0.742065f},
	{-0.917999f,-0.059113f,-0.392059f},{0.365509f,0.462158f,-0.807922f},{0.083374f,0.996399f,-0.014801f},
	{0.593842f,0.253143f,-0.763672f},{0.974976f,-0.165466f,0.148285f},{0.918976f,0.137299f,0.369537f},
	{0.294952f,0.694977f,0.655731f},{0.943085f,0.152618f,-0.295319f},{0.587830f,-0.598236f,0.544495f},
	{0.203796f,0.678223f,0.705994f},{-0.478821f,-0.661011f,0.577667f},{0.719055f,-0.169800f,-0.673828f},
	{-0.132172f,-0.965332f,0.225006f},{-0.981873f,-0.145020f,0.121979f},{0.763458f,0.579742f,0.284546f},
	{-0.893188f,0.079681f,0.442474f},{-0.795776f,-0.523804f,0.303802f},{0.734955f,0.678040f,-0.007446f},
	{0.155060f,0.986267f,-0.056183f},{0.258026f,0.571503f,-0.778931f},{-0.681549f,-0.702087f,-0.206116f},
	{-0.962860f,-0.177185f,0.203613f},{-0.470978f,-0.515106f,0.716095f},{-0.740326f,0.571350f,0.354095f},
	{-0.560120f,-0.824982f,-0.074982f},{-0.507874f,0.753204f,0.417969f},{-0.503113f,0.038147f,0.863342f},
	{0.594025f,0.673553f,-0.439758f},{-0.119873f,-0.005524f,-0.992737f},{0.098267f,-0.213776f,0.971893f},
	{-0.615631f,0.643951f,0.454163f},{0.896851f,-0.441071f,0.032166f},{-0.555023f,0.750763f,-0.358093f},
	{0.398773f,0.304688f,0.864929f},{-0.722961f,0.303589f,0.620544f},{-0.635590f,-0.621948f,-0.457306f},
	{-0.293243f,0.072327f,0.953278f},{-0.491638f,0.661041f,-0.566772f},{-0.304199f,-0.572083f,-0.761688f},
	{0.908081f,-0.398956f,0.127014f},{-0.523621f,-0.549683f,-0.650848f},{-0.932922f,-0.199860f,0.299408f},
	{0.099426f,0.140869f,0.984985f},{-0.020325f,-0.999756f,-0.002319f},{0.952667f,0.280853f,-0.116150f},
	{-0.971893f,0.082581f,0.220337f},{0.659210f,0.705292f,-0.260651f},{0.733063f,-0.175537f,0.657043f},
	{-0.555206f,0.429504f,-0.712189f},{0.400421f,-0.898590f,0.179352f},{0.750885f,-0.196960f,0.630341f},
	{0.785675f,-0.569336f,0.241821f},{-0.058899f,-0.464111f,0.883789f},{0.129608f,-0.945190f,0.299622f},
	{-0.357819f,0.907654f,0.219238f},{-0.842133f,-0.439117f,-0.312927f},{-0.313477f,0.844330f,0.434479f},
	{-0.241211f,0.053253f,0.968994f},{0.063873f,0.823273f,0.563965f},{0.476288f,0.862152f,-0.172516f},
	{0.620941f,-0.298126f,0.724915f},{0.252380f,-0.749359f,-0.612122f},{-0.577545f,0.386566f,0.718994f},
	{-0.406342f,-0.737976f,0.538696f},{0.047180f,0.556305f,0.829590f},{-0.802856f,0.587463f,0.101166f},
	{-0.707733f,-0.705963f,0.026428f},{0.374908f,0.684570f,0.625092f},{0.472137f,0.208405f,-0.856506f},
	{-0.703064f,-0.581085f,-0.409821f},{-0.417206f,-0.736328f,0.532623f},{-0.447876f,-0.202850f,-0.870728f},
	{0.086945f,-0.990417f,0.107086f},{0.183685f,0.018341f,-0.982788f},{0.560638f,-0.428864f,0.708282f},
	{0.296722f,-0.952576f,-0.067200f},{0.135773f,0.990265f,0.030243f},{-0.068787f,0.654724f,0.752686f},
	{0.762604f,-0.551758f,0.337585f},{-0.819611f,-0.407684f,0.402466f},{-0.727844f,-0.550720f,-0.408539f},
	{-0.855774f,-0.480011f,0.192810f},{0.693176f,-0.079285f,0.716339f},{0.226013f,0.650116f,-0.725433f},
	{0.246704f,0.953369f,-0.173553f},{-0.970398f,-0.239227f,-0.032440f},{0.136383f,-0.394318f,0.908752f},
	{0.813232f,0.558167f,0.164368f},{0.404510f,0.549042f,-0.731323f},{-0.380249f,-0.566711f,0.730865f},
	{0.022156f,0.932739f,0.359741f},{0.008240f,0.996552f,-0.082306f},{0.956635f,-0.065338f,-0.283722f},
	{-0.743561f,0.008209f,0.668579f},{-0.859589f,-0.509674f,0.035767f},{-0.852234f,0.363678f,-0.375977f},
	{-0.201965f,-0.970795f,-0.129150f},{0.313477f,0.947327f,0.065460f},{-0.254028f,-0.528259f,0.810150f},
	{0.628052f,0.601105f,0.494110f},{-0.494385f,0.868378f,0.037933f},{0.275635f,-0.086426f,0.957336f},
	{-0.197937f,0.468903f,-0.860748f},{0.895599f,0.399384f,0.195801f},{0.560791f,0.825012f,-0.069214f},
	{0.304199f,-0.849487f,0.431030f},{0.096375f,0.935760f,0.339111f},{-0.051422f,0.408966f,-0.911072f},
	{0.330444f,0.942841f,-0.042389f},{-0.452362f,-0.786407f,0.420563f},{0.134308f,-0.933472f,-0.332489f},
	{0.801910f,-0.566711f,-0.188934f},{-0.987946f,-0.105988f,0.112518f},{-0.244080f,0.892242f,-0.379791f},
	{-0.920502f,0.229095f,-0.316376f},{0.778900f,0.325958f,0.535706f},{-0.912872f,0.185211f,-0.363770f},
	{-0.184784f,0.565369f,-0.803833f},{-0.018463f,0.119537f,0.992615f},{-0.259247f,-0.935608f,0.239532f},
	{-0.823730f,-0.449127f,-0.345947f},{-0.433105f,0.659515f,0.614349f},{-0.822754f,0.378845f,-0.423676f},
	{0.687195f,-0.674835f,-0.268890f},{-0.246582f,-0.800842f,0.545715f},{-0.729187f,-0.207794f,0.651978f},
	{0.653534f,-0.610443f,-0.447388f},{0.492584f,-0.023346f,0.869934f},{0.609039f,0.009094f,-0.793060f},
	{0.962494f,-0.271088f,-0.008850f},{0.265900f,-0.004913f,0.963959f},{0.651245f,0.553619f,-0.518951f},
	{0.280548f,-0.843140f,0.458618f},{-0.175293f,-0.983215f,0.049805f},{0.035339f,-0.979919f,0.196045f},
	{-0.982941f,0.164307f,-0.082245f},{0.233734f,-0.972260f,-0.005005f},{-0.747253f,-0.611328f,0.260437f},
	{0.645599f,0.592773f,0.481384f},{0.117706f,-0.949524f,-0.290680f},{-0.535004f,-0.791901f,-0.294312f},
	{-0.627167f,-0.214447f,0.748718f},{-0.047974f,-0.813477f,-0.579590f},{-0.175537f,0.477264f,-0.860992f},
	{0.738556f,-0.414246f,-0.531830f},{0.562561f,-0.704071f,0.433289f},{-0.754944f,0.648010f,-0.100586f},
	{0.114716f,0.044525f,-0.992371f},{0.966003f,0.244873f,-0.082764f},{0.337830f,0.715698f,-0.611206f},
	{-0.944031f,-0.326599f,-0.045624f},
};

static const int g_perlin_data_ub[512 + 2] = {
	0xA2, 0xA0, 0x19, 0x3B, 0xF8, 0xEB, 0xAA, 0xEE, 0xF3, 0x1C, 0x67, 0x28,
	0x1D, 0xED, 0x0,  0xDE, 0x95, 0x2E, 0xDC, 0x3F, 0x3A, 0x82, 0x35, 0x4D,
	0x6C, 0xBA, 0x36, 0xD0, 0xF6, 0xC,  0x79, 0x32, 0xD1, 0x59, 0xF4, 0x8,
	0x8B, 0x63, 0x89, 0x2F, 0xB8, 0xB4, 0x97, 0x83, 0xF2, 0x8F, 0x18, 0xC7,
	0x51, 0x14, 0x65, 0x87, 0x48, 0x20, 0x42, 0xA8, 0x80, 0xB5, 0x40, 0x13,
	0xB2, 0x22, 0x7E, 0x57, 0xBC, 0x7F, 0x6B, 0x9D, 0x86, 0x4C, 0xC8, 0xDB,
	0x7C, 0xD5, 0x25, 0x4E, 0x5A, 0x55, 0x74, 0x50, 0xCD, 0xB3, 0x7A, 0xBB,
	0xC3, 0xCB, 0xB6, 0xE2, 0xE4, 0xEC, 0xFD, 0x98, 0xB,  0x96, 0xD3, 0x9E,
	0x5C, 0xA1, 0x64, 0xF1, 0x81, 0x61, 0xE1, 0xC4, 0x24, 0x72, 0x49, 0x8C,
	0x90, 0x4B, 0x84, 0x34, 0x38, 0xAB, 0x78, 0xCA, 0x1F, 0x1,  0xD7, 0x93,
	0x11, 0xC1, 0x58, 0xA9, 0x31, 0xF9, 0x44, 0x6D, 0xBF, 0x33, 0x9C, 0x5F,
	0x9,  0x94, 0xA3, 0x85, 0x6,  0xC6, 0x9A, 0x1E, 0x7B, 0x46, 0x15, 0x30,
	0x27, 0x2B, 0x1B, 0x71, 0x3C, 0x5B, 0xD6, 0x6F, 0x62, 0xAC, 0x4F, 0xC2,
	0xC0, 0xE,  0xB1, 0x23, 0xA7, 0xDF, 0x47, 0xB0, 0x77, 0x69, 0x5,  0xE9,
	0xE6, 0xE7, 0x76, 0x73, 0xF,  0xFE, 0x6E, 0x9B, 0x56, 0xEF, 0x12, 0xA5,
	0x37, 0xFC, 0xAE, 0xD9, 0x3,  0x8E, 0xDD, 0x10, 0xB9, 0xCE, 0xC9, 0x8D,
	0xDA, 0x2A, 0xBD, 0x68, 0x17, 0x9F, 0xBE, 0xD4, 0xA,  0xCC, 0xD2, 0xE8,
	0x43, 0x3D, 0x70, 0xB7, 0x2,  0x7D, 0x99, 0xD8, 0xD,  0x60, 0x8A, 0x4,
	0x2C, 0x3E, 0x92, 0xE5, 0xAF, 0x53, 0x7,  0xE0, 0x29, 0xA6, 0xC5, 0xE3,
	0xF5, 0xF7, 0x4A, 0x41, 0x26, 0x6A, 0x16, 0x5E, 0x52, 0x2D, 0x21, 0xAD,
	0xF0, 0x91, 0xFF, 0xEA, 0x54, 0xFA, 0x66, 0x1A, 0x45, 0x39, 0xCF, 0x75,
	0xA4, 0x88, 0xFB, 0x5D, 0xA2, 0xA0, 0x19, 0x3B, 0xF8, 0xEB, 0xAA, 0xEE,
	0xF3, 0x1C, 0x67, 0x28, 0x1D, 0xED, 0x0,  0xDE, 0x95, 0x2E, 0xDC, 0x3F,
	0x3A, 0x82, 0x35, 0x4D, 0x6C, 0xBA, 0x36, 0xD0, 0xF6, 0xC,  0x79, 0x32,
	0xD1, 0x59, 0xF4, 0x8,  0x8B, 0x63, 0x89, 0x2F, 0xB8, 0xB4, 0x97, 0x83,
	0xF2, 0x8F, 0x18, 0xC7, 0x51, 0x14, 0x65, 0x87, 0x48, 0x20, 0x42, 0xA8,
	0x80, 0xB5, 0x40, 0x13, 0xB2, 0x22, 0x7E, 0x57, 0xBC, 0x7F, 0x6B, 0x9D,
	0x86, 0x4C, 0xC8, 0xDB, 0x7C, 0xD5, 0x25, 0x4E, 0x5A, 0x55, 0x74, 0x50,
	0xCD, 0xB3, 0x7A, 0xBB, 0xC3, 0xCB, 0xB6, 0xE2, 0xE4, 0xEC, 0xFD, 0x98,
	0xB,  0x96, 0xD3, 0x9E, 0x5C, 0xA1, 0x64, 0xF1, 0x81, 0x61, 0xE1, 0xC4,
	0x24, 0x72, 0x49, 0x8C, 0x90, 0x4B, 0x84, 0x34, 0x38, 0xAB, 0x78, 0xCA,
	0x1F, 0x1,  0xD7, 0x93, 0x11, 0xC1, 0x58, 0xA9, 0x31, 0xF9, 0x44, 0x6D,
	0xBF, 0x33, 0x9C, 0x5F, 0x9,  0x94, 0xA3, 0x85, 0x6,  0xC6, 0x9A, 0x1E,
	0x7B, 0x46, 0x15, 0x30, 0x27, 0x2B, 0x1B, 0x71, 0x3C, 0x5B, 0xD6, 0x6F,
	0x62, 0xAC, 0x4F, 0xC2, 0xC0, 0xE,  0xB1, 0x23, 0xA7, 0xDF, 0x47, 0xB0,
	0x77, 0x69, 0x5,  0xE9, 0xE6, 0xE7, 0x76, 0x73, 0xF,  0xFE, 0x6E, 0x9B,
	0x56, 0xEF, 0x12, 0xA5, 0x37, 0xFC, 0xAE, 0xD9, 0x3,  0x8E, 0xDD, 0x10,
	0xB9, 0xCE, 0xC9, 0x8D, 0xDA, 0x2A, 0xBD, 0x68, 0x17, 0x9F, 0xBE, 0xD4,
	0xA,  0xCC, 0xD2, 0xE8, 0x43, 0x3D, 0x70, 0xB7, 0x2,  0x7D, 0x99, 0xD8,
	0xD,  0x60, 0x8A, 0x4,  0x2C, 0x3E, 0x92, 0xE5, 0xAF, 0x53, 0x7,  0xE0,
	0x29, 0xA6, 0xC5, 0xE3, 0xF5, 0xF7, 0x4A, 0x41, 0x26, 0x6A, 0x16, 0x5E,
	0x52, 0x2D, 0x21, 0xAD, 0xF0, 0x91, 0xFF, 0xEA, 0x54, 0xFA, 0x66, 0x1A,
	0x45, 0x39, 0xCF, 0x75, 0xA4, 0x88, 0xFB, 0x5D, 0xA2, 0xA0
};

sfloat1 noise(const sfloat4 &pos){
	sfloat4 t = pos+sfloat1(1e4f);
	sint4 b0 = sint4::And(sint4::convert(t),sint4(255));
	sint4 b1 = sint4::And(b0+sint4(1),sint4(255));
	sfloat4 r0 = t-sfloat4::floor(t);
	sfloat4 r1 = r0-sfloat4(1.0f);

	dintN b0x = dintN(b0.v[0]);
	dintN b0y = dintN(b0.v[1]);
	dintN b0z = dintN(b0.v[2]);
	dintN b1x = dintN(b1.v[0]);
	dintN b1y = dintN(b1.v[1]);
	dintN b1z = dintN(b1.v[2]);
	dintN b00, b10, b01, b11;
	for(uint i = 0; i < BLCLOUD_VSIZE; ++i){
		int a = g_perlin_data_ub[b0x.v[i]], b = g_perlin_data_ub[b1x.v[i]];
		b00.v[i] = g_perlin_data_ub[a+b0y.v[i]];
		b10.v[i] = g_perlin_data_ub[b+b0y.v[i]];
		b01.v[i] = g_perlin_data_ub[a+b1y.v[i]];
		b11.v[i] = g_perlin_data_ub[b+b1y.v[i]];
	}

	sfloat4 s = r0*r0*(sfloat4(3.0f)-sfloat4(2.0f)*r0);

	sfloat1 u, v, a, b;
	sfloat4 q;
	for(uint i = 0; i < BLCLOUD_VSIZE; ++i)
		q.set(i,float4::load(&g_perlin_data[b00.v[i]+b0z.v[i]]));
	u = r0.v[0]*q.v[0]+r0.v[1]*q.v[1]+r0.v[2]*q.v[2];
	for(uint i = 0; i < BLCLOUD_VSIZE; ++i)
		q.set(i,float4::load(&g_perlin_data[b10.v[i]+b0z.v[i]]));
	v = r1.v[0]*q.v[0]+r0.v[1]*q.v[1]+r0.v[2]*q.v[2];
	a = sfloat1::lerp(u,v,s.v[0]);

	for(uint i = 0; i < BLCLOUD_VSIZE; ++i)
		q.set(i,float4::load(&g_perlin_data[b01.v[i]+b0z.v[i]]));
	u = r0.v[0]*q.v[0]+r1.v[1]*q.v[1]+r0.v[2]*q.v[2];
	for(uint i = 0; i < BLCLOUD_VSIZE; ++i)
		q.set(i,float4::load(&g_perlin_data[b11.v[i]+b0z.v[i]]));
	v = r1.v[0]*q.v[0]+r1.v[1]*q.v[1]+r0.v[2]*q.v[2];
	b = sfloat1::lerp(u,v,s.v[0]);

	sfloat1 c = sfloat1::lerp(a,b,s.v[1]);

	for(uint i = 0; i < BLCLOUD_VSIZE; ++i)
		q.set(i,float4::load(&g_perlin_data[b00.v[i]+b1z.v[i]]));
	u = r0.v[0]*q.v[0]+r0.v[1]*q.v[1]+r1.v[2]*q.v[2];
	for(uint i = 0; i < BLCLOUD_VSIZE; ++i)
		q.set(i,float4::load(&g_perlin_data[b10.v[i]+b1z.v[i]]));
	v = r1.v[0]*q.v[0]+r0.v[1]*q.v[1]+r1.v[2]*q.v[2];
	a = sfloat1::lerp(u,v,s.v[0]);

	for(uint i = 0; i < BLCLOUD_VSIZE; ++i)
		q.set(i,float4::load(&g_perlin_data[b01.v[i]+b1z.v[i]]));
	u = r0.v[0]*q.v[0]+r1.v[1]*q.v[1]+r1.v[2]*q.v[2];
	for(uint i = 0; i < BLCLOUD_VSIZE; ++i)
		q.set(i,float4::load(&g_perlin_data[b11.v[i]+b1z.v[i]]));
	v = r1.v[0]*q.v[0]+r1.v[1]*q.v[1]+r1.v[2]*q.v[2];
	b = sfloat1::lerp(u,v,s.v[0]);

	sfloat1 d = sfloat1::lerp(a,b,s.v[1]);

	return 1.5f*sfloat1::lerp(c,d,s.v[2]);
}

#if 0
static const int p[] = {151,160,137,91,90,15,
	131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,
	190, 6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,
	88,237,149,56,87,174,20,125,136,171,168, 68,175,74,165,71,134,139,48,27,166,
	77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,
	102,143,54, 65,25,63,161, 1,216,80,73,209,76,132,187,208, 89,18,169,200,196,
	135,130,116,188,159,86,164,100,109,198,173,186, 3,64,52,217,226,250,124,123,
	5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,
	223,183,170,213,119,248,152, 2,44,154,163, 70,221,153,101,155,167, 43,172,9,
	129,22,39,253, 19,98,108,110,79,113,224,232,178,185, 112,104,218,246,97,228,
	251,34,242,193,238,210,144,12,191,179,162,241, 81,51,145,235,249,14,239,107,
	49,192,214, 31,181,199,106,157,184, 84,204,176,115,121,50,45,127, 4,150,254,
	138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180
};

inline sfloat4 fade(const sfloat4 &t){
	return t*t*t*(t*(t*sfloat1(6.0f)-sfloat1(15.0f))+sfloat1(10.0f));
}

inline float4 fade(const float4 &t){
	return t*t*t*(t*(t*float4(6.0f)-float4(15.0f))+float4(10.0f));
}

inline sfloat1 grad(const sint1 &_h, const sfloat4 &pos){
	sint1 h = sint1::And(_h,sint1(15));
	sint1 mu = sint1::Less(h,sint1(8));
	sint1 mv = sint1::Less(h,sint1(4));
	sint1 mw = sint1::Or(sint1::Equal(h,sint1(12)),sint1::Equal(h,sint1(14)));
	sfloat1 u = sfloat1::Or(sfloat1::And(mu,pos.v[0]),sfloat1::AndNot(mu,pos.v[1]));
	sfloat1 v = sfloat1::Or(sfloat1::And(mv,pos.v[1]),sfloat1::AndNot(mv,sfloat1::Or(sfloat1::And(mw,pos.v[0]),sfloat1::AndNot(mw,pos.v[2]))));
	sint1 ms = sint1::Equal(sint1::And(h,sint1(1)),sint1(0));
	sint1 mt = sint1::Equal(sint1::And(h,sint1(2)),sint1(0));
	return sfloat1::Or(sint1::And(ms,u),sint1::AndNot(ms,-u))+sfloat1::Or(sfloat1::And(mt,v),sfloat1::AndNot(mt,-v));
}

//http://mrl.nyu.edu/~perlin/noise/
sfloat1 noise(const sfloat4 &_pos){
	sfloat4 F = sfloat4::floor(_pos);
	sfloat4 pos = _pos-F; //frac
	sfloat4 fad = fade(pos);

	sint4 I = sint4::And(sint4::convert(F),sint4(sint1(255)));
	dintN AA, AB, BA, BB;
	dintN X, Y, Z;
	sint1::store(&X,I.v[0]);
	sint1::store(&Y,I.v[1]);
	sint1::store(&Z,I.v[2]);
	for(uint i = 0; i < BLCLOUD_VSIZE; ++i){
		int A = p[(X.v[i]+0)%256]+Y.v[i];
		AA.v[i] = p[(A+0)%256]+Z.v[i];
		AB.v[i] = p[(A+1)%256]+Z.v[i];
		int B = p[(X.v[i]+1)%256]+Y.v[i];
		BA.v[i] = p[(B+0)%256]+Z.v[i];
		BB.v[i] = p[(B+1)%256]+Z.v[i];
	}
	sint1 aa = sint1::load(&AA), ab = sint1::load(&AB), ba = sint1::load(&BA), bb = sint1::load(&BB);
	return sfloat1::lerp(
		sfloat1::lerp(sfloat1::lerp(grad(aa,pos),
									grad(ba,pos+sfloat1(-1,0,0,0)),fad.v[0]),
					  sfloat1::lerp(grad(ab,pos+sfloat1(0,-1,0,0)),
									grad(bb,pos+sfloat1(-1,-1,0,0)),fad.v[0]),fad.v[1]),
		sfloat1::lerp(sfloat1::lerp(grad(aa+sfloat1::one(),pos+sfloat1(0,0,-1,0)),
									grad(ba+sfloat1::one(),pos+sfloat1(-1,0,-1,0)),fad.v[0]),
					  sfloat1::lerp(grad(ab+sfloat1::one(),pos+sfloat1(0,-1,-1,0)),
									grad(bb+sfloat1::one(),pos+sfloat1(-1,-1,-1,0)),fad.v[0]),fad.v[1]),fad.v[2]);
}
#endif

}

namespace fBm{

sfloat1 noise(const sfloat4 &_pos, uint octaves, float freq, float amp, float fjump, float gain){
	sfloat1 s = sfloat1::zero();
	for(uint i = 0; i < octaves; ++i){
		s += PerlinNoise::noise(_pos*freq)*amp;
		freq *= fjump;
		amp *= gain;
	}
	return s;
}

float GetAmplitudeMax(uint octaves, float amp, float gain){
	float s = 0.0f;
	for(uint i = 0; i < octaves; ++i){
		s += amp;
		amp *= gain;
	}
	return s;
}

}

namespace Node{

FbmNoise::FbmNoise(uint _level, NodeTree *pnt) : BaseValueNode<float>(_level,pnt), BaseValueNode<dfloat3>(_level,pnt), BaseNode(_level,pnt), IFbmNoise(_level,pnt){
	//
}

FbmNoise::~FbmNoise(){
	//
}

void FbmNoise::Evaluate(const void *pp){
	BaseValueNode<int> *poctn = dynamic_cast<BaseValueNode<int>*>(pnodes[INPUT_OCTAVES]);
	BaseValueNode<float> *pfreqn = dynamic_cast<BaseValueNode<float>*>(pnodes[INPUT_FREQ]);
	BaseValueNode<float> *pampn = dynamic_cast<BaseValueNode<float>*>(pnodes[INPUT_AMP]);
	BaseValueNode<float> *pfjumpn = dynamic_cast<BaseValueNode<float>*>(pnodes[INPUT_FJUMP]);
	BaseValueNode<float> *pgainn = dynamic_cast<BaseValueNode<float>*>(pnodes[INPUT_GAIN]);
	BaseValueNode<dfloat3> *pnode = dynamic_cast<BaseValueNode<dfloat3>*>(pnodes[INPUT_POSITION]);

	dfloat3 dposw = pnode->locr(indices[INPUT_POSITION]);
	sfloat4 sposw = sfloat4(sfloat1(dposw.x,dposw.y,dposw.z,0.0f))+sfloat4(
		sfloat1(0.0f),
		sfloat1(1.0f,0.0f,0.0f,0.0f),
		sfloat1(0.0f,1.0f,0.0f,0.0f),
		sfloat1(0.0f,0.0f,1.0f,0.0f))*sfloat1(154.7f);

	sfloat1 f = fBm::noise(sposw,poctn->locr(indices[INPUT_OCTAVES]),pfreqn->locr(indices[INPUT_FREQ]),
		pampn->locr(indices[INPUT_AMP]),pfjumpn->locr(indices[INPUT_FJUMP]),pgainn->locr(indices[INPUT_GAIN]));

	BaseValueResult<float> &rs = this->BaseValueNode<float>::result.local();
	rs.value[OUTPUT_FLOAT_NOISE] = f.get<0>();
	rs.value[OUTPUT_FLOAT_MAXIMUM] = fBm::GetAmplitudeMax(poctn->locr(indices[INPUT_OCTAVES]),pampn->locr(indices[INPUT_AMP]),
		pgainn->locr(indices[INPUT_GAIN])); //Calculate the maximum value given. Works only when all the input parameters are constant.
	BaseValueResult<dfloat3> &rv = this->BaseValueNode<dfloat3>::result.local();
	rv.value[OUTPUT_VECTOR_NOISE] = dfloat3(0.57735f*f); //normalize by 1/sqrt(3) to have max length equal to amplitude
}

IFbmNoise * IFbmNoise::Create(uint level, NodeTree *pnt){
	return new FbmNoise(level,pnt);
}

}
